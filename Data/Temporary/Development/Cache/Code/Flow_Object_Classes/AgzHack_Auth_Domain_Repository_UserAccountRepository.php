<?php 

namespace AgzHack\Auth\Domain\Repository;

use AgzHack\Auth\Domain\Model\UserAccount;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\Repository;
use Neos\Flow\Security\Account;

/**
 * @Flow\Scope("singleton")
 */
class UserAccountRepository_Original extends Repository
{


    /**
     * @param Account $account
     * @return UserAccount
     * @throws \Neos\Flow\Persistence\Exception\InvalidQueryException
     */
    public function findOneHavingAccount(Account $account)
    {
        $query = $this->createQuery();

        return $query->matching($query->contains('accounts', $account))->execute()->getFirst();
    }
}

#
# Start of Flow generated Proxy code
#
namespace AgzHack\Auth\Domain\Repository;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 * @\Neos\Flow\Annotations\Scope("singleton")
 */
class UserAccountRepository extends UserAccountRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'AgzHack\Auth\Domain\Repository\UserAccountRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('AgzHack\Auth\Domain\Repository\UserAccountRepository', $this);
        parent::__construct();
        if ('AgzHack\Auth\Domain\Repository\UserAccountRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'entityClassName' => 'string',
  'defaultOrderings' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'AgzHack\Auth\Domain\Repository\UserAccountRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('AgzHack\Auth\Domain\Repository\UserAccountRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'persistenceManager',
);
    }
}
# PathAndFilename: /var/www/lux/Packages/Application/AgzHack.Auth/Classes/Domain/Repository/UserAccountRepository.php
#