<?php 
namespace Neos\Flow\Security\Cryptography;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Utility\Algorithms as UtilityAlgorithms;

/**
 * Hashing passwords using BCrypt
 */
class BCryptHashingStrategy_Original implements PasswordHashingStrategyInterface
{
    /**
     * Number of rounds to use with BCrypt for hashing passwords, must be between 4 and 31
     * @var integer
     */
    protected $cost;

    /**
     * Construct a PBKDF2 hashing strategy with the given parameters
     *
     * @param integer $cost
     * @throws \InvalidArgumentException
     */
    public function __construct($cost)
    {
        if ($cost < 4 || $cost > 31) {
            throw new \InvalidArgumentException('BCrypt cost must be between 4 and 31.', 1318447710);
        }

        $this->cost = sprintf('%02d', $cost);
    }

    /**
     * Creates a BCrypt hash
     *
     * @param string $password   The plaintext password to hash
     * @param string $staticSalt Optional static salt that will not be stored in the hashed password
     * @return string the result of the crypt() call
     */
    public function hashPassword($password, $staticSalt = null)
    {
        $dynamicSalt = UtilityAlgorithms::generateRandomString(22, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./');
        return crypt($password, '$2a$' . $this->cost . '$' . $dynamicSalt);
    }

    /**
     * Validate a password against a derived key (hashed password) and salt using BCrypt
     *
     * Passwords hashed with a different cost can be validated by using the cost parameter of the
     * hashed password and salt.
     *
     * @param string $password The cleartext password
     * @param string $hashedPasswordAndSalt The derived key and salt in as returned by crypt() for verification
     * @param string $staticSalt Optional static salt that will be appended to the dynamic salt
     * @return boolean TRUE if the given password matches the hashed password
     */
    public function validatePassword($password, $hashedPasswordAndSalt, $staticSalt = null)
    {
        if (strlen($hashedPasswordAndSalt) < 29 || strpos($hashedPasswordAndSalt, '$2a$') !== 0) {
            return false;
        }

        $cryptSalt = '$2a$' . substr($hashedPasswordAndSalt, 4, 26);
        return crypt($password, $cryptSalt) === $hashedPasswordAndSalt;
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Flow\Security\Cryptography;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * Hashing passwords using BCrypt
 */
class BCryptHashingStrategy extends BCryptHashingStrategy_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     * @param integer $cost
     * @throws \InvalidArgumentException
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'Neos\Flow\Security\Cryptography\BCryptHashingStrategy') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\Cryptography\BCryptHashingStrategy', $this);

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->getSettingsByPath(explode('.', 'Neos.Flow.security.cryptography.BCryptHashingStrategy.cost'));
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $cost in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        call_user_func_array('parent::__construct', $arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'cost' => 'integer',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Flow\Security\Cryptography\BCryptHashingStrategy') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\Cryptography\BCryptHashingStrategy', $this);

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/lux/Packages/Framework/Neos.Flow/Classes/Security/Cryptography/BCryptHashingStrategy.php
#