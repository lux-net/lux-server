<?php 
namespace Neos\Flow\Security\Cryptography;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Utility;

/**
 * A salted MD5 based password hashing strategy
 *
 */
class SaltedMd5HashingStrategy_Original implements PasswordHashingStrategyInterface
{
    /**
     * Generates a salted md5 hash over the given string.
     *
     * @param string $clearString The unencrypted string which is the subject to be hashed
     * @return string Salted hash and the salt, separated by a comma ","
     */
    public static function generateSaltedMd5($clearString)
    {
        $salt = substr(md5(rand() . Utility\Algorithms::generateRandomString(23)), 0, rand(6, 10));
        return (md5(md5($clearString) . $salt) . ',' . $salt);
    }

    /**
     * Tests if the given string would produce the same hash given the specified salt.
     * Use this method to validate hashes generated with generateSlatedMd5().
     *
     * @param string $clearString
     * @param string $hashedStringAndSalt
     * @return boolean TRUE if the clear string matches, otherwise FALSE
     * @throws \InvalidArgumentException
     */
    public static function validateSaltedMd5($clearString, $hashedStringAndSalt)
    {
        if (strpos($hashedStringAndSalt, ',') === false) {
            throw new \InvalidArgumentException('The hashed string must contain a salt, separated with comma from the hashed.', 1269872776);
        }
        list($passwordHash, $salt) = explode(',', $hashedStringAndSalt);
        return (md5(md5($clearString) . $salt) === $passwordHash);
    }

    /**
     * Hash a password using salted MD5
     *
     * @param string $password The cleartext password
     * @param string $staticSalt ignored parameter
     * @return string A hashed password with salt
     */
    public function hashPassword($password, $staticSalt = null)
    {
        return self::generateSaltedMd5($password);
    }

    /**
     * Validate a hashed password using salted MD5
     *
     * @param string $password The cleartext password
     * @param string $hashedPasswordAndSalt The hashed password with salt
     * @param string $staticSalt ignored parameter
     * @return boolean TRUE if the given password matches the hashed password
     */
    public function validatePassword($password, $hashedPasswordAndSalt, $staticSalt = null)
    {
        return self::validateSaltedMd5($password, $hashedPasswordAndSalt);
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Flow\Security\Cryptography;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * A salted MD5 based password hashing strategy
 */
class SaltedMd5HashingStrategy extends SaltedMd5HashingStrategy_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/lux/Packages/Framework/Neos.Flow/Classes/Security/Cryptography/SaltedMd5HashingStrategy.php
#