<?php 

namespace AgzHack\Lux\Domain\Repository;

/*
 * This file is part of the AgzHack.Lux package.
 */

use AgzHack\Geo\Domain\Model\Coordinate;
use AgzHack\Lux\Domain\Model\LightMarker;
use DoctrineExtensions\Query\Mysql\Acos;
use DoctrineExtensions\Query\Mysql\Cos;
use DoctrineExtensions\Query\Mysql\Radians;
use DoctrineExtensions\Query\Mysql\Sin;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\Repository;

/**
 * @Flow\Scope("singleton")
 */
class LightMarkerDoctrineRepository_Original extends \Neos\Flow\Persistence\Doctrine\Repository
{
    const ENTITY_CLASSNAME = LightMarker::class;

    /**
     * @param LightMarker $marker
     * @param int $maxDistanceInMeters
     * @return LightMarker
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findNearestMarker(LightMarker $marker, $maxDistanceInMeters = 20)
    {
        $this->addNewDoctrineNumericFuncions();

        $earthRadius = Coordinate::EARTH_RADIUS;
        $newLatitude = $marker->getCoordinate()->getLatitude();
        $newLongitude = $marker->getCoordinate()->getLongitude();

        $distanceCalculation = "({$earthRadius} * acos( cos(radians($newLatitude) ) * cos( radians(lightMarker.coordinate.latitude) )
                    * cos( radians(lightMarker.coordinate.longitude) - radians($newLongitude)) + sin(radians(lightMarker.coordinate.latitude)) * sin( radians($newLatitude)))) AS distance";

        $query = $this->getEntityManager()->createQueryBuilder();
        $query
            ->select('lightMarker', $distanceCalculation)
            ->from(LightMarker::class, 'lightMarker')
            ->having('distance < :maxDistanceInMeters and lightMarker.parentMarker is null')
            ->setParameters([
                'maxDistanceInMeters' => $maxDistanceInMeters
            ])
            ->addOrderBy('distance', 'asc');

        return $query->getQuery()->getOneOrNullResult();
    }

    private function addNewDoctrineNumericFuncions()
    {
        $this->getEntityManager()->getConfiguration()->addCustomNumericFunction('COS', Cos::class);
        $this->getEntityManager()->getConfiguration()->addCustomNumericFunction('ACOS', Acos::class);
        $this->getEntityManager()->getConfiguration()->addCustomNumericFunction('RADIANS', Radians::class);
        $this->getEntityManager()->getConfiguration()->addCustomNumericFunction('SIN', Sin::class);
    }
}

#
# Start of Flow generated Proxy code
#
namespace AgzHack\Lux\Domain\Repository;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 * @\Neos\Flow\Annotations\Scope("singleton")
 */
class LightMarkerDoctrineRepository extends LightMarkerDoctrineRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     * @param \Doctrine\Common\Persistence\ObjectManager $entityManager The EntityManager to use.
     * @param \Doctrine\Common\Persistence\Mapping\ClassMetadata $classMetadata The class descriptor.
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'AgzHack\Lux\Domain\Repository\LightMarkerDoctrineRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('AgzHack\Lux\Domain\Repository\LightMarkerDoctrineRepository', $this);

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\Common\Persistence\ObjectManager');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $entityManager in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        call_user_func_array('parent::__construct', $arguments);
        if ('AgzHack\Lux\Domain\Repository\LightMarkerDoctrineRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'objectType' => 'string',
  'defaultOrderings' => 'array',
  '_entityName' => 'string',
  '_em' => 'Doctrine\\ORM\\EntityManager',
  '_class' => '\\Doctrine\\ORM\\Mapping\\ClassMetadata',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'AgzHack\Lux\Domain\Repository\LightMarkerDoctrineRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('AgzHack\Lux\Domain\Repository\LightMarkerDoctrineRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'persistenceManager',
);
    }
}
# PathAndFilename: /var/www/lux/Packages/Application/AgzHack.Lux/Classes/Domain/Repository/LightMarkerDoctrineRepository.php
#