<?php 
namespace Neos\Flow\Mvc;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Error\Messages\Message;

/**
 * This is a container for all Flash Messages.
 *
 * @Flow\Scope("session")
 * @api
 */
class FlashMessageContainer_Original
{
    /**
     * @var array
     */
    protected $messages = [];

    /**
     * Add a flash message object.
     *
     * @param Message $message
     * @return void
     * @Flow\Session(autoStart=true)
     * @api
     */
    public function addMessage(Message $message)
    {
        $this->messages[] = $message;
    }

    /**
     * Returns all currently stored flash messages.
     *
     * @param string $severity severity of messages (from Message::SEVERITY_* constants) to return.
     * @return array<Message>
     * @api
     */
    public function getMessages($severity = null)
    {
        if ($severity === null) {
            return $this->messages;
        }

        $messages = [];
        foreach ($this->messages as $message) {
            if ($message->getSeverity() === $severity) {
                $messages[] = $message;
            }
        }
        return $messages;
    }

    /**
     * Remove messages from this container.
     *
     * @param string $severity severity of messages (from Message::SEVERITY_* constants) to remove.
     * @return void
     * @Flow\Session(autoStart=true)
     * @api
     */
    public function flush($severity = null)
    {
        if ($severity === null) {
            $this->messages = [];
        } else {
            foreach ($this->messages as $index => $message) {
                if ($message->getSeverity() === $severity) {
                    unset($this->messages[$index]);
                }
            }
        }
    }

    /**
     * Get all flash messages (with given severity) currently available and remove them from the container.
     *
     * @param string $severity severity of the messages (One of the Message::SEVERITY_* constants)
     * @return array<Message>
     * @api
     */
    public function getMessagesAndFlush($severity = null)
    {
        $messages = $this->getMessages($severity);
        if (count($messages) > 0) {
            $this->flush($severity);
        }
        return $messages;
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Flow\Mvc;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * This is a container for all Flash Messages.
 * @\Neos\Flow\Annotations\Scope("session")
 */
class FlashMessageContainer extends FlashMessageContainer_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\Aop\AdvicesTrait, \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;

    private $Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array();

    private $Flow_Aop_Proxy_groupedAdviceChains = array();

    private $Flow_Aop_Proxy_methodIsInAdviceMode = array();


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Flow\Mvc\FlashMessageContainer') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Mvc\FlashMessageContainer', $this);
    }

    /**
     * Autogenerated Proxy Method
     */
    protected function Flow_Aop_Proxy_buildMethodsAndAdvicesArray()
    {
        if (method_exists(get_parent_class(), 'Flow_Aop_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray')) parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray();

        $objectManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager;
        $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array(
            'addMessage' => array(
                'Neos\Flow\Aop\Advice\BeforeAdvice' => array(
                    new \Neos\Flow\Aop\Advice\BeforeAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'initializeSession', $objectManager, NULL),
                ),
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'flush' => array(
                'Neos\Flow\Aop\Advice\BeforeAdvice' => array(
                    new \Neos\Flow\Aop\Advice\BeforeAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'initializeSession', $objectManager, NULL),
                ),
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'getMessages' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'getMessagesAndFlush' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
        );
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Flow\Mvc\FlashMessageContainer') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Mvc\FlashMessageContainer', $this);

        $this->Flow_setRelatedEntities();
            $result = NULL;
        if (method_exists(get_parent_class(), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __clone()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
    }

    /**
     * Autogenerated Proxy Method
     * @param Message $message
     * @return void
     * @\Neos\Flow\Annotations\Session(autoStart=true)
     */
    public function addMessage(\Neos\Error\Messages\Message $message)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addMessage'])) {
            $result = parent::addMessage($message);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['addMessage'] = TRUE;
            try {
            
                $methodArguments = [];

                $methodArguments['message'] = $message;
            
                if (isset($this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['addMessage']['Neos\Flow\Aop\Advice\BeforeAdvice'])) {
                    $advices = $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['addMessage']['Neos\Flow\Aop\Advice\BeforeAdvice'];
                    $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'addMessage', $methodArguments);
                    foreach ($advices as $advice) {
                        $advice->invoke($joinPoint);
                    }

                    $methodArguments = $joinPoint->getMethodArguments();
                }

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('addMessage');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'addMessage', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addMessage']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addMessage']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $severity severity of messages (from Message::SEVERITY_* constants) to remove.
     * @return void
     * @\Neos\Flow\Annotations\Session(autoStart=true)
     */
    public function flush($severity = NULL)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['flush'])) {
            $result = parent::flush($severity);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['flush'] = TRUE;
            try {
            
                $methodArguments = [];

                $methodArguments['severity'] = $severity;
            
                if (isset($this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['flush']['Neos\Flow\Aop\Advice\BeforeAdvice'])) {
                    $advices = $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['flush']['Neos\Flow\Aop\Advice\BeforeAdvice'];
                    $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'flush', $methodArguments);
                    foreach ($advices as $advice) {
                        $advice->invoke($joinPoint);
                    }

                    $methodArguments = $joinPoint->getMethodArguments();
                }

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('flush');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'flush', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['flush']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['flush']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $severity severity of messages (from Message::SEVERITY_* constants) to return.
     * @return array<Message>
     */
    public function getMessages($severity = NULL)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessages'])) {
            $result = parent::getMessages($severity);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessages'] = TRUE;
            try {
            
                $methodArguments = [];

                $methodArguments['severity'] = $severity;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getMessages');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'getMessages', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessages']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessages']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $severity severity of the messages (One of the Message::SEVERITY_* constants)
     * @return array<Message>
     */
    public function getMessagesAndFlush($severity = NULL)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessagesAndFlush'])) {
            $result = parent::getMessagesAndFlush($severity);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessagesAndFlush'] = TRUE;
            try {
            
                $methodArguments = [];

                $methodArguments['severity'] = $severity;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getMessagesAndFlush');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Mvc\FlashMessageContainer', 'getMessagesAndFlush', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessagesAndFlush']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getMessagesAndFlush']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'messages' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }
}
# PathAndFilename: /var/www/lux/Packages/Framework/Neos.Flow/Classes/Mvc/FlashMessageContainer.php
#